@page "/category"
@using YumBlazor.Data
@using YumBlazor.Repository.IRepository
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JS

<BsModal OnModalConfirmation="ConfirmDelete_Click" ButtonBootstrapStyle="btn-danger" ButtonText="Delete" Title="Are you sure you want to delete the category?"></BsModal>
@if(IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />

    </div>
}
else
{
    <div class="card shadow border-0  m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div  class="col-12 text-center">
                    <h2 class="text-white py-2">CategoryList</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3 ">
                <div class="col-12 text-end">
                    <a href="/category/create" class="btn btn-lg btn-secondary" style="width:250px;"><i class="bi bi-plus-square-fill"></i> Add New Category</a>
                </div>
                @if (Categories.Any())
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Category Name</th>
                                <th></th>
                             
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var category in Categories)
                            {
                                <tr>
                                    <td>@category.Name</td>
                                    <td>
                                        <a href="@($"/category/update/{category.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i> Edit</a>
                                        <button class="btn btn-danger" @onclick="()=>HandleDelete(category.Id)"><i class="bi bi-trash3"></i> Delete</button>
                                    </td>
                                   
                                </tr>
                            }
                           
                        </tbody>

                    </table>
                }
             </div>

        </div>

    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    public int DeleteCategoryID { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        // IsProcessing = true;
        //// await Task.Delay(2000);
        // await LoadCategories();
        // IsProcessing = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            IsProcessing = true;
            //await Task.Delay(2000);
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadCategories()
    {
        Categories = await _categoryRepository.GetAllAsync();
    }

    private async Task HandleDelete(int id)
    {
        DeleteCategoryID = id;
        await _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        if(isConfirmed && DeleteCategoryID != 0)
        {
           var result= await _categoryRepository.DeleteAsync(DeleteCategoryID);
           if(result)
            _JS?.ToastrSuccess("Data Deleted Successfully");
            else
                _JS?.ToastrError("Error Encountered while deleting");
                await LoadCategories();
        }
        DeleteCategoryID = 0;
        IsProcessing = false;
    }

}
