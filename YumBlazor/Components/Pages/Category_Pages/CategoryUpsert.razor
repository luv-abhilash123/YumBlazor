@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

<h3>CategoryUpsert</h3>
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />

    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
           <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
               <DataAnnotationsValidator/>
               <div class="border p-3 mt-4">
                   <div class="form-floating py-3 col-12">
                       <InputText @bind-Value="Category.Name" class="form-control" id="Name" placeholder="Name"/>
                       <label for="Name">Name</label>
                       <ValidationMessage For="@(()=>Category.Name)" />
                   </div>
                   <div class="row mt-3">
                       <div class="col-6 col-md-3">
                           <button type="submit" class="btn btn-primary form-control" >
                                <i class="bi bi-floppy2-fill"></i>@(Id == 0 ? "Create" : "Update")
                           </button>

                       </div>
                        <div class="col-6 col-md-3">
                            <a href="category" class="btn btn-secondary form-control" >
                                <i class="bi bi-arrow-bar-left"></i>Back to the list
                            </a>

                        </div>

                   </div>
               </div>

           </EditForm>

        </div>

    </div>
}

@code {
    [Parameter]
    public int Id{ get; set; }

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();

    private bool IsProcessing { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsProcessing = true;
            //await Task.Delay(2000);
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    public async Task LoadCategory()
    {
        if(Id>0)
        {
            Category = await _categoryRepository.GetAsync(Id);

        }
    }
    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if(Category.Id==0)
        {
            await _categoryRepository.CreateAsync(Category);
            await _JS.ToastrSuccess("Category Created Successfully");
        }
        else
        {
            await _categoryRepository.UpdateAsync(Category);
            await _JS.ToastrSuccess("Category Updated Successfully");

        }
        IsProcessing = false;

        _navigationManager.NavigateTo("category");
    }

}
